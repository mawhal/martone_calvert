dtax   <- ad[ grep( paste0(taxon,"*"), ad$taxon_revised ), ]
#dtax  <-  dtax[ -grep( "Ectocarpus*",dtax$Taxon), ]
# merge data and metadata
# get all instances of a particular taxon, and code missing as zero
# include all quadrats
d <- left_join( metause, dtax )
d$Abundance[ is.na( d$Abundance) ] <- 0
# # get rid of bad merging
# d <- d %>%
#   filter( !is.na(Site), !is.na(Zone) )
# # query d for consistent plots revisited
# drevisited <- d %>%
#   group_by( Site, Zone, Meter.point ) %>%
#   summarize( n = length(Quadrat) ) %>%
#   arrange( -n )
# dfilt <- left_join(d, drevisited) %>%
#   filter( n > 5 )
# d <- dfilt
# *** to add *** include full names for each unique instance of Sampler
# # chose an observer/recorder
# sort(unique( am$Sampler ))
# sort(unique( am$Recorder ))
# allpeeps <- data.frame( Person = sort(unique( c(am$Sampler,am$Recorder))), fullName=""  )
# write_csv(allpeeps, "R/output/all_samplers_recorders.csv")
# # Sandra C Lindstrom
# sandra     <- c( "Sandra", "SCL", "SL" )
# # select the plots we want from the metadata
# dperson <- d %>%
#   filter( Sampler %in% sandra | Recorder %in% sandra )
# d<- dperson
# make abundances numeric
sort(unique(d$Abundance))
d$Abundance <- as.numeric( d$Abundance )
# define leveles for zones
d$Zone <- factor( d$Zone, levels = c("LOW","MID","HIGH"), ordered = T )
# define Site order
d$Site <- factor( d$Site, levels = sites )
# define Year factor
d$Year <- factor( d$Year, ordered= TRUE )
# all sites
# time trends in different tidal zones
windows(5,5)
(ggzone <- ggplot( d, aes(x=as.numeric(as.character(Year)),y=Abundance)) +
facet_grid(Site~Zone, scales="free_y") +
# geom_smooth( se=TRUE, col='black' ) +
stat_summary( fun.data = "mean_cl_boot", colour = "slateblue4", size = 0.5 ) +
stat_summary( fun = "mean", geom="line", colour = "slateblue4", size = 0.5 ) +
geom_point( alpha=0.4,col='slateblue' ) + ggtitle( taxon ) +
xlab("Year") + ylab("Cover (%)") +
scale_x_continuous(breaks = seq(2010,2018,2) ) )
ggsave( paste0("R/Figs/",taxon,"_zone.svg") )
# plot means across the dataset, at least those with SOME presence
# pick transects
d <- d %>%
unite( transect, Site, Zone, remove=F )
dtrans <- d  %>%
group_by( transect ) %>%
summarize( Abundance=sum(Abundance) ) %>%
filter( Abundance>0 )
dall <- d %>%
filter( transect %in% dtrans$transect )
(ggall <- ggplot( dall, aes(x=as.numeric(as.character(Year)),y=Abundance)) +
# facet_grid(Site~Zone, scales="free_y") +
geom_smooth( se=TRUE, col='black' ) +
# stat_summary( fun.data = "mean_cl_boot", colour = "slateblue4", size = 0.5 ) +
# stat_summary( fun = "mean", geom="line", colour = "slateblue4", size = 0.5 ) +
geom_point( alpha=0.4,col='slateblue' ) +
ggtitle( taxon ) +
xlab("Year") + ylab("Cover (%)") +
scale_x_continuous(breaks = seq(2010,2018,2) ) )
ggsave( paste0("R/Figs/",taxon,"_all.svg"), width=3, height=3 )
# just plot abundan over time
# windows(6,2)
# (ggzall <- ggplot( d, aes(x=lubridate::ymd(Date),y=Abundance)) +
#     # facet_grid(Site~Zone, scales="free_y") +
#     # geom_smooth( se=TRUE, col='black' ) +
#     # stat_summary( fun.data = "mean_cl_boot", colour = "slateblue4", size = 0.5 ) +
#     # stat_summary( fun.y = "mean", geom="line", colour = "slateblue4", size = 0.5 ) +
#     # geom_smooth(method='glm',method.args=list(family=quasipoisson)) +
#     geom_smooth() +
#     geom_point( alpha=0.4,col='slateblue' ) +# ggtitle( taxon ) +
#     geom_point( data=filter(d,saoidjas))#
#     xlab("Year")  )
#
# # subset of sites where elevation has been measured
# delev <- d[ d$Site != "Meay Channel", ]
# windows(10,4)
# (ggheight <- ggplot( delev, aes(x=Shore_height_cm,y=Abundance)) +
#     facet_grid(Site~Year, scales = "free_y") +
#     geom_point(alpha=0.2) +  ggtitle( taxon ) +
#     geom_smooth(method="glm", method.args=list(family="quasipoisson"),
#                 formula = ceiling(y) ~ poly(x,2),
#                 se=FALSE, lwd=0.5) )
# # ggsave( paste0("R Code and Analysis/Figs/",taxon,"_elevation_wide.pdf"), ggheight, "pdf" )
#
# windows(4,6)
# (ggheight2 <- ggplot( delev, aes(x=Shore_height_cm,y=Abundance,group=Year,col=Year )) +
#     facet_wrap(~Site,ncol=1, scales = "free_y") +
#     geom_point(alpha=0.75) +  ggtitle( taxon ) +
#     geom_smooth(method="glm", method.args=list(family="poisson"),
#                 formula = ceiling(y) ~ poly(x,2),
#                 se=FALSE, lwd=0.5) +
#     # geom_smooth(aes(group=1)) +
#     scale_x_continuous(trans='log10') ) +
#   scale_color_viridis_d( direction=-1 )
#
# ggsave( paste0("R Code and Analysis/Figs/",taxon,"_elevation.pdf"), ggheight2, "pdf" )
# })
(ggzone <- ggplot( d, aes(x=as.numeric(as.character(Year)),y=Abundance)) +
facet_grid(Site~Zone, scales="free_y") +
# geom_smooth( se=TRUE, col='black' ) +
stat_summary( fun.data = "mean_cl_boot", colour = "slateblue4", size = 0.5 ) +
stat_summary( fun = "mean", geom="line", colour = "slateblue4", size = 0.5 ) +
geom_point( alpha=0.4,col='slateblue' ) + ggtitle( taxon ) +
xlab("Year") + ylab("Cover (%)") +
scale_x_continuous(breaks = seq(2010,2018,2) ) )
ggsave( paste0("R/Figs/",taxon,"_zone.svg") )
devtools::install_github("paul-vdb/DFO-master-sample")
install.packages('devtools')
devtools::install_github("paul-vdb/DFO-master-sample")
install.packages('Rtools')
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
install.packages("jsonlite", type = "source")
devtools::install_github("paul-vdb/DFO-master-sample")
install.packages("remotes")
library(BASMasterSample)
remotes::install_github("paul-vdb/DFO-master-sample")
install.packages("s2")
install.packages("raster")
remotes::install_github("paul-vdb/DFO-master-sample")
library(DFO-master-sample)
library('DFO-master-sample')
devtools::install_github("paul-vdb/DFO-master-sample")
remotes::install_github("paul-vdb/DFO-master-sample", force = TRUE)
install.packages("s2")
library(s2)
library(remotes)
install.packages("s2")
remotes::install_github("paul-vdb/DFO-master-sample", force = TRUE)
library(BASMasterSample)
library(sf)
library(sp)
data(Fed_MPAs_clipped)
smp <- masterSample(Fed_MPAs_clipped, N = 100)
plot(smp)
smp <- masterSample(Fed_MPAs_clipped, N = 100)
Fed_MPAs_clipped
smp <- masterSample(Fed_MPAs_clipped, N = 100)
Fed_MPAs_clipped
?masterSample
class(Fed_MPAs_clipped)
smp <- masterSample(Fed_MPAs_clipped, N = 10)
library(taxize)
install.packages("taxize")
library(taxize)
library(tidyverse)
# load libraries
library(tidyverse)
library(vegan)
library(psych)
library(plotrix)
## read data files
# all metadata
am <- read_csv( "Data/R code for Data Prep/Output from R/Martone_Hakai_metadata.csv" )
# remove Meay Channel
am <- am[ am$Site != "Meay Channel", ]
# sampling dates in different years
View( am %>%
# mutate( month=)
group_by( Date ) %>%
summarize(  samples=length(unique(UID)) ) )
# load libraries
library(tidyverse)
library(vegan)
install.packages('vegan')
install.packages('psych')
install.packages('plotrix')
## read data files
# all metadata
am <- read_csv( "Data/R code for Data Prep/Output from R/Martone_Hakai_metadata.csv" )
# remove Meay Channel
am <- am[ am$Site != "Meay Channel", ]
# sampling dates in different years
View( am %>%
# mutate( month=)
group_by( Date ) %>%
summarize(  samples=length(unique(UID)) ) )
library(vegan)
library(psych)
library(plotrix)
# sampling dates in different years
View( am %>%
# mutate( month=)
group_by( Date ) %>%
summarize(  samples=length(unique(UID)) ) )
# sampling dates in different years
# View(
am %>%
# mutate( month=)
group_by( Date ) %>%
summarize(  samples=length(unique(UID)) )
range_table <- am %>%
group_by( Year ) %>%
summarize( start = range(Date)[1], end=range(Date)[2])
range_table
# sampling dates in different years
# View(
am %>%
# mutate( month=)
group_by( Date ) %>%
summarize(  samples=length(unique(UID))
)
# median/mean date in each year
am %>%
group_by( Year ) %>%
summarize( date = median(Date) )
library(tidyverse)
# read data
list.files(path = "Data/tides/predictions_adams_harbour/")
# read data
list.files(path = "Data/tides/predictions_adams_harbour/", full.names = TRUE)
# read data
files <- list.files(path = "Data/tides/predictions_adams_harbour/", full.names = TRUE)
lapply( files, read_csv )
dlist <- lapply( files, read_csv )
do.call( rbind, dlist)
dbind <- do.call( rbind, dlist)
library(lubridate)
# add columns for year
dbind %>%
mutate( year = lubridate::year(date))
length(dbind)/length(files)
length(files)
length(dbind)
nrow(dbind)/length(files)
files
?rep
rep( c("sampling","solstice"),
each = nrow(dbind)/length(files),
length.out = nrow(dbind) )
# add columns for year
dbind %>%
mutate( year = lubridate::year(date),
source = rep( c("sampling","solstice"),
each = nrow(dbind)/length(files),
length.out = nrow(dbind) ) )
files
# add columns for year, prediction type (solstice or sampling)
d <- dbind %>%
mutate( year = lubridate::year(date),
source = rep( c("sampling","solstice"),
each = nrow(dbind)/length(files),
length.out = nrow(dbind) ) )
names(d)
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
geom_lines()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_grid(year~source, scales = "free_x") +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_grid(year~source, scales = "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_wrap(year~source, "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_wrap(~source, "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date,y = sea_surface_elevation)) +
facet_wrap(~source+year, "free") +
geom_line()
# scale date
d %>%
mutate( date_scale = scale(date))
# scale date
d <- d %>%
mutate( date_scale = scale(date))
d$date
d$date_scale
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_wrap(~source+year, "free") +
geom_line()
# scale date
d <- d %>%
group_by(year) +
mutate( date_scale = scale(date))
# scale date
d <- d %>%
group_by(year) %>%
mutate( date_scale = scale(date))
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_wrap(~source+year, "free") +
geom_line()
# scale date
d <- d %>%
group_by(year,source) %>%
mutate( date_scale = scale(date))
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_wrap(~source+year, "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source, "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source, "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_line()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(col='red',lwd=0.5) +
theme_bw()
geom_line(aes(col=source,lwd=0.5) +
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
theme_bw()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("red","blue"))
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("red","orange"))
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","orange"))
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","darkorange"))
theme_classic()
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","darkorange")) +
theme_classic()
# load libraries
library(tidyverse)
library(lubridate)
# read data and bind together
files <- list.files(path = "Data/tides/predictions_adams_harbour/", full.names = TRUE)
dlist <- lapply( files, read_csv )
dbind <- do.call( rbind, dlist)
# add columns for year, prediction type (solstice or sampling)
d <- dbind %>%
mutate( year = lubridate::year(date),
source = rep( c("sampling","solstice"),
each = nrow(dbind)/length(files),
length.out = nrow(dbind) ) )
# scale date
d <- d %>%
group_by(year,source) %>%
mutate( date_scale = scale(date))
# plot
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","darkorange")) +
theme_classic() +
theme(legend.position = NULL)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","darkorange")) +
theme_classic() +
theme(legend.position = NA)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","darkorange")) +
theme_classic() +
theme(legend.position = 'none')
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
theme_classic() +
theme(legend.position = 'none')
windows(5,5)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
theme_classic() +
theme(legend.position = 'none')
windows(6,6)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source,scales =  "free") +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
theme_classic() +
theme(legend.position = 'none')
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
theme_classic() +
theme(legend.position = 'none')
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
theme_classic() +
theme(legend.position = 'none')
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.5) +
scale_color_manual(values = c("slategrey","slateblue")) +
ylab("Sea surface elevation (m)") + xlab("time") +
theme_classic() +
theme(legend.position = 'none')
ggsave("Data/tides/tides_sampling_solstice.svg", width = 5.5, height = 5)
install.packages('svglite')
ggsave( "Data/tides/tides_sampling_solstice.svg", width = 5.5, height = 5)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.33) +
scale_color_manual(values = c("slategrey","slateblue")) +
ylab("Sea surface elevation (m)") + xlab("Time") +
theme_classic() +
theme(legend.position = 'none')
ggsave( "Data/tides/tides_sampling_solstice.svg", width = 5.5, height = 5)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.33) +
scale_color_manual(values = c("slategrey","slateblue")) +
scale_y_continuous(breaks = c(1,3,5)) +
ylab("Sea surface elevation (m)") + xlab("Time") +
theme_classic() +
theme(legend.position = 'none')
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.33) +
scale_color_manual(values = c("slategrey","slateblue")) +
scale_y_continuous(breaks = c(1,3,5), minor_breaks = c(0:5)) +
ylab("Sea surface elevation (m)") + xlab("Time") +
theme_classic() +
theme(legend.position = 'none')
ggsave( "Data/tides/tides_sampling_solstice.svg", width = 5.5, height = 5)
# plot
ggplot( data = d, aes(x = date_scale,y = sea_surface_elevation)) +
facet_grid(year~source) +
geom_vline(xintercept = 0, col = 'red' ) +
geom_line(aes(col=source),lwd=0.33) +
scale_color_manual(values = c("slategrey","slateblue")) +
scale_y_continuous(breaks = c(1,3,5), minor_breaks = c(0:5)) +
ylab("Sea surface elevation (m above MLLWLT)") + xlab("Time") +
theme_classic() +
theme(legend.position = 'none')
ggsave( "Data/tides/tides_sampling_solstice.svg", width = 5.5, height = 5)
